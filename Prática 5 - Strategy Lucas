public interface Adicional {
    String getDescricao();
    double custo();
}

public class Acai implements Adicional {
    private Tamanho tamanho;

    public Acai(Tamanho tamanho) {
        this.tamanho = tamanho;
    }

    @Override
    public String getDescricao() {
        return "Açaí " + tamanho;
    }

    @Override
    public double custo() {
        switch (tamanho) {
            case PEQUENO: return 5.00;
            case MEDIO: return 7.00;
            case GRANDE: return 9.00;
            default: return 0;
        }
    }

    public Tamanho getTamanho() {
        return tamanho;
    }
}

public abstract class BaseDecorator implements Adicional {
    protected Adicional wrappee;

    public BaseDecorator(Adicional wrappee) {
        this.wrappee = wrappee;
    }

    @Override
    public String getDescricao() {
        return wrappee.getDescricao();
    }

    @Override
    public double custo() {
        return wrappee.custo();
    }
}

public class Morango extends BaseDecorator {
    public Morango(Adicional wrappee) {
        super(wrappee);
    }

    @Override
    public String getDescricao() {
        return wrappee.getDescricao() + ", Morango";
    }

    @Override
    public double custo() {
        double custoAdicional = 0;
        switch (((Acai) wrappee).getTamanho()) {
            case PEQUENO: custoAdicional = 1.00; break;
            case MEDIO: custoAdicional = 1.50; break;
            case GRANDE: custoAdicional = 2.00; break;
        }
        return wrappee.custo() + custoAdicional;
    }
}

public class Banana extends BaseDecorator {
    public Banana(Adicional wrappee) {
        super(wrappee);
    }

    @Override
    public String getDescricao() {
        return wrappee.getDescricao() + ", Banana";
    }

    @Override
    public double custo() {
        double custoAdicional = 0;
        switch (((Acai) wrappee).getTamanho()) {
            case PEQUENO: custoAdicional = 0.80; break;
            case MEDIO: custoAdicional = 1.20; break;
            case GRANDE: custoAdicional = 1.60; break;
        }
        return wrappee.custo() + custoAdicional;
    }
}

public class LeiteCondensado extends BaseDecorator {
    public LeiteCondensado(Adicional wrappee) {
        super(wrappee);
    }

    @Override
    public String getDescricao() {
        return wrappee.getDescricao() + ", Leite Condensado";
    }

    @Override
    public double custo() {
        double custoAdicional = 0;
        switch (((Acai) wrappee).getTamanho()) {
            case PEQUENO: custoAdicional = 1.50; break;
            case MEDIO: custoAdicional = 2.00; break;
            case GRANDE: custoAdicional = 2.50; break;
        }
        return wrappee.custo() + custoAdicional;
    }
}

public enum Tamanho {
    PEQUENO, MEDIO, GRANDE;
}

public class TestaDecorator {
    public static void main(String[] args) {
        Adicional acaiSimples = new Acai(Tamanho.MEDIO);
        System.out.println(acaiSimples.getDescricao() + " R$ " + acaiSimples.custo());

        Adicional acaiComMorango = new Morango(acaiSimples);
        System.out.println(acaiComMorango.getDescricao() + " R$ " + acaiComMorango.custo());

        Adicional acaiComMorangoLeiteBanana = new Banana(new LeiteCondensado(new Morango(acaiSimples)));
        System.out.println(acaiComMorangoLeiteBanana.getDescricao() + " R$ " + acaiComMorangoLeiteBanana.custo());
    }
}
